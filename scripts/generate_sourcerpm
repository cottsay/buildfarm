#!/usr/bin/env python

from __future__ import print_function
from buildfarm.fedora_vmap import fedora_ver
from buildfarm.mock_root import check_mock_config, get_default_confdir
import os
from platform import machine
import subprocess
from subprocess import Popen, CalledProcessError
import sys

def parse_options():
    import argparse
    parser = argparse.ArgumentParser(description='Creates a set of source rpms from a catkin release repo. Creates source rpms from the latest upstream version.')
    parser.add_argument(dest='repo_uri',
                        help='A read-only release repo uri.')
    parser.add_argument('package_name', help='The package name for the package we\'re building')
    parser.add_argument('rosdistro', help='Which rosdistro to operate on')
    parser.add_argument('short_package_name', help='The package name for the package we\'re building, w/o the packaging extensions')
    parser.add_argument('--working', help='A scratch build path. Default: %(default)s', default='/tmp/catkin_release')
    parser.add_argument('--output', help='The result of source deb building will go here. Default: %(default)s', default='/tmp/catkin_rpms')
    parser.add_argument('--repo-fqdn', dest='repo_fqdn', help='The fully qualified domain name of the repo machine. Default: %(default)s', default='csc.mcs.sdsmt.edu')
    parser.add_argument('--repo-path', dest='repo_path', help='The path to find the repo on the machine. Default: %(default)s', default='/mnt/storage/repos/smd-ros-building')
    parser.add_argument('--base-mock-cfg', help='Path to or name of the base mock config for sourcerpm build environment.', default=None)
    parser.add_argument('-n', dest='noupload', help='Do not try to upload', action='store_true', default=False)

    args = parser.parse_args()

    return args


def make_working(working_dir):
    if not os.path.exists(working_dir):
        os.makedirs(working_dir)


def call(working_dir, command, pipe=None):
    print('+ cd %s && ' % working_dir + ' '.join(command))
    process = Popen(command, stdout=pipe, stderr=pipe, cwd=working_dir)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        raise CalledProcessError(retcode, command)
    if pipe:
        return output


def verify_rpm_tag(repo_uri, package_name, package_version, distro):
    tags = call(None, ('git', 'ls-remote', '--tags', repo_uri, 'rpm/*'), pipe=subprocess.PIPE)

    expected_tag = 'rpm/%s-%s_%s'%(package_name, package_version, distro)
    tag_list = []
    for tag in tags.split('\n'):
        if tag != '':
            tag_list += [tag.split()[-1].replace('refs/tags/','')]

    if expected_tag in tag_list:
        return expected_tag
    else:
        print("No matching tag found. Are you sure you pointed to the right repository or the version is right?, expected %s:\n Tags: %s" % (expected_tag, tags))
    return None


def build_source_rpm(repo_uri, tag, packagename, distro, output, base_mock_cfg):
    check_mock_config(distro, 'src', True, True, get_default_confdir(), [], base=base_mock_cfg)
    call(None, ('mock', '--quiet', '--configdir', get_default_confdir(), '--root',  'fedora-' + str(fedora_ver[distro]) + '-' + machine() + '-rossrc', '--buildsrpm', '--resultdir', output, '--scm-enable', '--scm-option', 'git_get=git clone ' + repo_uri + ' ' + packagename, '--scm-option', 'package=' + packagename, '--scm-option', 'branch=' + tag, '--scm-option', 'write_tar=True', '--scm-option', 'spec=rpm/' + packagename + '.spec'))
    print("Successfully created changes in %s" % output)
    call(None, ['ls', output])


def upload_source_rpm(distros, repo_fqdn, input_directory, packagename):
    upload_root = "/tmp/upload/%s" % packagename

    upload_root_list = []

    # Copy up the data
    for distro in distros:
        upload_source = os.path.join(input_directory, distro, 'SRPMS')
        distro_upload_root = os.path.join(upload_root, str(fedora_ver[distro]))
        da_upload_root = os.path.join(distro_upload_root, 'SRPMS')
        # clear the upload directory to make sure that there are not old files lying around
        cmd = ("ssh rosbuild@%s -- rm -rf %s" % (repo_fqdn, da_upload_root)).split()
        call('/tmp/', cmd)
        cmd = ("ssh rosbuild@%s -- mkdir -p %s" % (repo_fqdn, distro_upload_root)).split()
        call('/tmp/', cmd)
        cmd = ("scp -r %s rosbuild@%s:%s" % (upload_source, repo_fqdn, da_upload_root)).split()
        call('/tmp/', cmd)
        upload_root_list += [da_upload_root]

    # list all the folders where data is expected in one operation
    folder_options = ' '.join(['-f %s' % root for root in upload_root_list])
    cmd = ("ssh rosbuild@%(repo_fqdn)s -- PYTHONPATH=/home/rosbuild/rpmrepo_updater/src python /home/rosbuild/rpmrepo_updater/scripts/update_trigger.py %(folder_options)s --delete" % locals()).split()
    call('/tmp/', cmd)


def find_file(directory, extension, substring=''):
    """ Return the first file in directory which has extension and contains the substring """
    files = os.listdir(directory)
    for f in files:
        if extension == os.path.splitext(f)[1] and substring in f:
            return f
    return None


if __name__ == "__main__":
    args = parse_options()
    make_working(args.working)

    if args.rosdistro != 'fuerte':
        from buildfarm.ros_distro import Rosdistro
    else:
        from buildfarm.ros_distro_fuerte import Rosdistro
    rd = Rosdistro(args.rosdistro)

    package_version = rd.get_version(args.short_package_name, full_version=True)
    print("package name", args.short_package_name, "version", package_version)

    report_failure = False
    for d in rd.get_target_distros()['fedora']:

        tag = verify_rpm_tag(args.repo_uri, args.package_name, package_version, d)
        if not tag:
            print("No tag; bailing")
            report_failure = True
            continue

        output_dir = os.path.join(args.output, d, 'SRPMS')
        os.makedirs(output_dir)
        try:
            build_source_rpm(args.repo_uri, tag, args.package_name, d, output_dir, args.base_mock_cfg)
            print("successfully created sourcerpm for tag %s on repo %s." % (tag, args.repo_uri))
        except CalledProcessError as ex:
            print("Failed to build sourcerpm for tag %s on repo %s: %s" % (tag, args.repo_uri, ex))
            report_failure = True
            continue

    try:

        if args.noupload:
            print("Noupload argument passed, skipping upload of %s" % args.output)
        else:
            upload_source_rpm(rd.get_target_distros()['fedora'], args.repo_fqdn,
                              args.output,
                              args.package_name
                              )
            print("Succeeded uploading for distro %s." % (d))
    except CalledProcessError as ex:
        print("Failed uploading for distro %s: %s" % (d, ex))
        report_failure = True

    if report_failure:
        print("Errors have occurred in the source build see above. ")
        sys.exit(1)
